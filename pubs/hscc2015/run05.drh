#define	alphax	0.0204
#define alphay	0.0242
#define	betax	0.0076
#define	betay	0.0168
#define	k1	0.0
#define	k2	2.0
#define	k3	8.0
#define	k4	0.5
#define	m1	0.00005
#define	z0	20.0
#define	t	62.5
#define	r1	10.0
#define	r0	4.0
#define	d0	1.0

#define	Gx	((alphax * (k1 + ((1 - k1) * (z / (z + k2))))) - (betax * (k3 + (1 - k3) * (z / (z + k4)))))
#define Gy	((alphay * (1 - (d0 * (z / z0)))) - betay)
#define Mxy	(m1 * (1 - (z / z0)))

#define scale	100.0
#define T	500.0

[0.0, 30.0]	x;
[0.0, 30.0]	y;
[0.0, 30.0]	z;

[0, 5.0]	time;
[0, T]		tau;

{mode 1;

invt:
        (x >= 0.0);
	(x <= 30);
        (y >= 0.0);
	(y <= 30);
        (z >= 0.0);
	(z <= 30);
        (tau >= 0.0);
	(tau <= T);
flow:
        d/dt[x] = (Gx - Mxy) * x * scale;
        d/dt[y] = scale * ((Mxy * x) + (Gy * y));
        d/dt[z] = scale * ((0 - z) / t);
        d/dt[tau] = scale;
jump:
        ((x+y) = r0) ==> @2 (and (tau' = tau) (x' = x) (y'= y) (z' = z));
        ((x+y) = 15) ==> @3 (and (tau' = tau) (x' = x) (y'= y) (z' = z));
}

{mode 2;

invt:
        (x >= 0.0);
	(x <= 30);
        (y >= 0.0);
	(y <= 30);
        (z >= 0.0);
	(z <= 30);
        (tau >= 0.0);
	(tau <= T);
flow:
        d/dt[x] = (Gx - Mxy) * x * scale;
        d/dt[y] = scale * ((Mxy * x) + (Gy * y));
        d/dt[z] = scale * ((z0 - z) / t);
        d/dt[tau] = scale;
jump:
        ((x+y) = r1) ==> @1 (and (tau' = tau) (x' = x) (y'= y) (z' = z));
}

{mode 3;
invt:
        (x >= 0.0);
	(x <= 35);
        (y >= 0.0);
	(y <= 1);
        (z >= 0.0);
	(z <= 20);
        (tau >= 0.0);
	(tau <= 60);
flow:
        d/dt[x] = 0;
        d/dt[y] = 0;
        d/dt[z] = 0;
        d/dt[tau] = 0;
jump:
        ((x+y)<=0) ==> @1 (and (tau' = tau) (x' = x) (y'= y) (z' = z));
}

init:

@1	(and (x >= 20) (x <= 30) (y = 0.1) (z = 16) (tau = 0));

goal:

@3	(and (x >= 0.0) (x <= 30.0) (y >= 0.0) (y <= 30.0) (z >= 0.0) (z <= 30.0) (tau >= 0.0) (tau <= 60.0));
